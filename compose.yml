
services:
  litellm:
    image: ghcr.io/berriai/litellm:litellm_stable_release_branch-v1.72.0-stable
    restart: unless-stopped
    volumes:
     - ./config.yaml:/app/config.yaml
     - ./.credentials:/app/.credentials
    command:
      # https://github.com/BerriAI/litellm/blob/main/litellm/proxy/proxy_cli.py
     - --config=/app/config.yaml
     - --debug
     - --run_gunicorn
     - --num_workers=${LITELLM_NUM_WORKERS:-1}
    #  - --use_queue
    ports:
      - "${LITELLM_PORT:-4000}:4000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: 8.0
          memory: 8192M
    environment:
        DATABASE_URL: "postgresql://${POSTGRES_USER:-llmproxy}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-litellm}"
        STORE_MODEL_IN_DB: "True" # allows adding models to proxy via UI
        REDIS_HOST: redis
        REDIS_PORT: 6379
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        PROMETHEUS_URL: ${PROMETHEUS_URL:-http://prometheus:9090}
        # LITELLM_LOG: DEBUG
    env_file:
      - .env

  fake-llm:
    build:
      context: ./mock_servers/example_openai_endpoint
      dockerfile: Dockerfile
    restart: unless-stopped
    command:
      - --workers=${FAKE_LLM_NUM_WORKERS:-4}
    ports:
      - "${FAKE_LLM_PORT:-8090}:8090"

  redis:
    image: redis/redis-stack:7.2.0-v13
    restart: unless-stopped
    ports:
      - "${REDIS_SERVER_PORT:-6379}:6379"
      - "${REDIS_INSIGHT_PORT:-8001}:8001"
    volumes:
      - redis-data:/data
      - ./redis-stack.conf:/redis-stack.conf
    deploy:
      resources:
        limits:
          memory: 2048M
    environment:
      REDIS_ARGS: "--save 60 1000 --requirepass ${REDIS_PASSWORD}"
      # REDISEARCH_ARGS:
      # REDISJSON_ARGS:
      REDISTIMESERIES_ARGS: "RETENTION_POLICY=20"
      # REDISBLOOM_ARGS:
      REDIS_DATA: /data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 2048M
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-litellm}
      POSTGRES_USER: ${POSTGRES_USER:-llmproxy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 15s
      timeout: 5s
      retries: 3

  pgadmin:
    profiles:
      - enterprise
    image: dpage/pgadmin4:7.7
    restart: unless-stopped
    volumes:
      - pgadmin:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"

  prometheus:
    profiles:
      - enterprise
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'

volumes:
  prometheus_data:
    driver: local
  redis-data:
  pgdata:
  pgadmin:
